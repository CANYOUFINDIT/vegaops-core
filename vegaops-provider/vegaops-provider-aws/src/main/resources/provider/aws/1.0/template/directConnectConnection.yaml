vendor: aws
nodeType: directConnectConnection
componentId: '#componentId'
actions:
- list
- install-uninstall
- location
- confirm
awsRegion: T(software.amazon.awssdk.regions.Region).of(#regionId)
credentials: T(software.amazon.awssdk.auth.credentials.AwsBasicCredentials).create(#accessKey,#secret)
awsCredentialsProvider: T(software.amazon.awssdk.auth.credentials.StaticCredentialsProvider).create(#credentials)
directConnectClient: T(software.amazon.awssdk.services.directconnect.DirectConnectClient).builder().credentialsProvider(#awsCredentialsProvider).region(#awsRegion).build()
list:
  argTypes:
  - software.amazon.awssdk.services.directconnect.model.DescribeConnectionsRequest
  output:
    log: 'false'
    success: '#result.sdkHttpResponse().statusCode() eq 200'
    close: '#directConnectClient.close()'
    '[connections]:[#result.connections()]':
      bandwidth: '#me.bandwidth()'
      partnerName: '#me.partnerName()'
      awsDevice: '#me.awsDevice()'
      connectionState: '#me.connectionState()'
      ownerAccount: '#me.ownerAccount()'
      loaIssueTime: '#me.loaIssueTime()'
      awsDeviceV2: '#me.awsDeviceV2()'
      tags: '#me.tags()'
      lagId: '#me.lagId()'
      vlan: '#me.vlan()'
      jumboFrameCapable: '#me.jumboFrameCapable()'
      providerId: '#me.connectionId()'
      location: '#me.location()'
      connectionName: '#me.connectionName()'
      region: '#me.region()'
      hasLogicalRedundancy: '#me.hasLogicalRedundancy()'
      providerName: '#me.providerName()'
  request: T(software.amazon.awssdk.services.directconnect.model.DescribeConnectionsRequest).builder().build()
  method: describeConnections
  argNames:
  - request
  client: '#directConnectClient'
location:
  argTypes:
  - software.amazon.awssdk.services.directconnect.model.DescribeLocationsRequest
  output:
    log: 'false'
    '[locations]:[#result.locations()]':
      locationName: '#me.locationName()'
      locationCode: '#me.locationCode()'
      region: '#me.region()'
    success: '#result.sdkHttpResponse().statusCode() eq 200'
    close: '#directConnectClient.close()'
  request: T(software.amazon.awssdk.services.directconnect.model.DescribeLocationsRequest).builder().build()
  method: describeLocations
  argNames:
  - request
  client: '#directConnectClient'
install:
  argTypes:
  - software.amazon.awssdk.services.directconnect.model.CreateConnectionRequest
  output:
    bandwidth: '#result.bandwidth()'
    partnerName: '#result.partnerName()'
    awsDevice: '#result.awsDevice()'
    connectionState: '#result.connectionState()'
    ownerAccount: '#result.ownerAccount()'
    loaIssueTime: '#result.loaIssueTime()'
    awsDeviceV2: '#result.awsDeviceV2()'
    tags: '#result.tags()'
    lagId: '#result.lagId()'
    vlan: '#result.vlan()'
    jumboFrameCapable: '#result.jumboFrameCapable()'
    success: '#result.sdkHttpResponse().statusCode() eq 200'
    providerId: '#result.connectionId()'
    location: '#result.location()'
    connectionName: '#result.connectionName()'
    region: '#result.region()'
    close: '#directConnectClient.close()'
    hasLogicalRedundancy: '#result.hasLogicalRedundancy()'
    providerName: '#result.providerName()'
  request: T(software.amazon.awssdk.services.directconnect.model.CreateConnectionRequest).builder().location(#location).bandwidth(#bandwidth).connectionName(#name).lagId(#lagId).providerName(#providerName).build()
  method: createConnection
  argNames:
  - request
  client: '#directConnectClient'
confirm:
  argTypes:
  - software.amazon.awssdk.services.directconnect.model.ConfirmConnectionRequest
  output:
    success: '#result.sdkHttpResponse().statusCode() eq 200'
  request: T(software.amazon.awssdk.services.directconnect.model.ConfirmConnectionRequest).builder().connectionId(#connectionId).build()
  method: confirmConnection
  argNames:
  - request
  client: '#directConnectClient'
uninstall:
  argTypes:
  - software.amazon.awssdk.services.directconnect.model.DeleteConnectionRequest
  output:
    deleteProviderId: '#connectionId'
    success: '#result.sdkHttpResponse().statusCode() eq 200'
    close: '#directConnectClient.close()'
  request: T(software.amazon.awssdk.services.directconnect.model.DeleteConnectionRequest).builder().connectionId(#connectionId).build()
  method: deleteConnection
  argNames:
  - request
  client: '#directConnectClient'
