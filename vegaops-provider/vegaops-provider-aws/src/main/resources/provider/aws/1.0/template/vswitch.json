{
  "vendor": "aws",
  "nodeType": "vswitch",
  "componentId": "#componentId",
  "actions": [
    "install-uninstall",
    "query",
    "list",
    "tag"
  ],
  "awsRegion": "T(software.amazon.awssdk.regions.Region).of(#regionId)",
  "credentials": "T(software.amazon.awssdk.auth.credentials.AwsBasicCredentials).create(#accessKey,#secret)",
  "awsCredentialsProvider": "T(software.amazon.awssdk.auth.credentials.StaticCredentialsProvider).create(#credentials)",
  "ec2Client": "T(software.amazon.awssdk.services.ec2.Ec2Client).builder().credentialsProvider(#awsCredentialsProvider).region(#awsRegion).build()",
  "install": {
    "client": "#ec2Client",
    "method": "createSubnet",
    "argTypes": [
      "software.amazon.awssdk.services.ec2.model.CreateSubnetRequest"
    ],
    "argNames": [
      "request"
    ],
    "request": "T(software.amazon.awssdk.services.ec2.model.CreateSubnetRequest).builder().availabilityZone(#availabilityZone).cidrBlock(#cidrBlock).vpcId(#vpcId).build()",
    "output": {
      "success": "#result?.sdkHttpResponse()?.statusCode() eq 200",
      "vswitchId": "#result.subnet()?.subnetId()",
      "close": "#ec2Client.close()",
      "after": {
        "action": "tag",
        "input": {
          "resourceId": "#vswitchId",
          "name": "#name"
        },
        "waitInterval": "3000",
        "retryTimes": "3",
        "output": {
          "success": "#state.toString() eq 'available'",
          "mergeKeys": "*"
        }
      }
    }
  },
  "query": {
    "client": "#ec2Client",
    "method": "describeSubnets",
    "argTypes": [
      "software.amazon.awssdk.services.ec2.model.DescribeSubnetsRequest"
    ],
    "argNames": [
      "request"
    ],
    "request": "T(software.amazon.awssdk.services.ec2.model.DescribeSubnetsRequest).builder().subnetIds(#vswitchId).build()",
    "output": {
      "success": "#result?.sdkHttpResponse()?.statusCode() eq 200",
      "close": "#ec2Client.close()",
      "availabilityZone": "#result.subnets()[0]?.availabilityZone()",
      "availabilityZoneId": "#result.subnets()[0]?.availabilityZoneId()",
      "availableIpAddressCount": "#result.subnets()[0]?.availableIpAddressCount()",
      "defaultForAz": "#result.subnets()[0]?.defaultForAz()",
      "mapPublicIpOnLaunch": "#result.subnets()[0]?.mapPublicIpOnLaunch()",
      "state": "#result.subnets()[0]?.state()",
      "providerId": "#result.subnets()[0]?.subnetId()",
      "cidrBlock": "#result.subnets()[0]?.cidrBlock()",
      "tags": "#result.subnets()[0]?.tags()",
      "subnetId": "#result.subnets()[0]?.subnetId()",
      "vpcId": "#result.subnets()[0]?.vpcId()",
      "ownerId": "#result.subnets()[0]?.ownerId()",
      "assignIpv6AddressOnCreation": "#result.subnets()[0]?.assignIpv6AddressOnCreation()",
      "ipv6CidrBlockAssociationSet": "#result.subnets()[0]?.ipv6CidrBlockAssociationSet()",
      "subnetArn": "#result.subnets()[0]?.subnetArn()",
      "outpostArn": "#result.subnets()[0]?.outpostArn()"
    }
  },
  "list": {
    "client": "#ec2Client",
    "method": "describeSubnets",
    "argTypes": [
      "software.amazon.awssdk.services.ec2.model.DescribeSubnetsRequest"
    ],
    "argNames": [
      "request"
    ],
    "request": "T(software.amazon.awssdk.services.ec2.model.DescribeSubnetsRequest).builder().build()",
    "output": {
      "success": "#result?.sdkHttpResponse()?.statusCode() eq 200",
      "close": "#ec2Client.close()",
      "log": "false",
      "[vpcList]:[#result.subnets()]": {
        "availabilityZone": "#me.availabilityZone()",
        "availabilityZoneId": "#me.availabilityZoneId()",
        "availableIpAddressCount": "#me.availableIpAddressCount()",
        "defaultForAz": "#me.defaultForAz()",
        "mapPublicIpOnLaunch": "#me.mapPublicIpOnLaunch()",
        "state": "#me.state()",
        "cidrBlock": "#me.cidrBlock()",
        "tags": "#me.tags()",
        "subnetId": "#me.subnetId()",
        "providerId": "#me.subnetId()",
        "vpcId": "#me.vpcId()",
        "ownerId": "#me.ownerId()",
        "regionId": "#regionId",
        "zoneId": "#zoneId",
        "assignIpv6AddressOnCreation": "#me.assignIpv6AddressOnCreation()",
        "ipv6CidrBlockAssociationSet": "#me.ipv6CidrBlockAssociationSet()",
        "subnetArn": "#me.subnetArn()",
        "outpostArn": "#me.outpostArn()"
      }
    }
  },
  "tag": {
    "client": "#ec2Client",
    "method": "createTags",
    "argTypes": [
      "software.amazon.awssdk.services.ec2.model.CreateTagsRequest"
    ],
    "argNames": [
      "request"
    ],
    "request": "T(software.amazon.awssdk.services.ec2.model.CreateTagsRequest).builder().resources(#resourceId).tags(T(software.amazon.awssdk.services.ec2.model.Tag).builder().key(\"Name\").value(#name).build()).build()",
    "output": {
      "success": "#result.sdkHttpResponse().statusCode() eq 200",
      "close": "#ec2Client.close()",
      "after": {
        "action": "query",
        "input": {
          "vswitchId": "#resourceId"
        },
        "waitInterval": "3000",
        "retryTimes": "3",
        "output": {
          "success": "#state.toString() eq 'available'",
          "mergeKeys": "*"
        }
      }
    }
  },
  "uninstall": {
    "client": "#ec2Client",
    "method": "deleteSubnet",
    "argTypes": [
      "software.amazon.awssdk.services.ec2.model.DeleteSubnetRequest"
    ],
    "argNames": [
      "request"
    ],
    "request": "T(software.amazon.awssdk.services.ec2.model.DeleteSubnetRequest).builder().subnetId(#vswitchId).build()",
    "output": {
      "success": "#result?.sdkHttpResponse()?.statusCode() eq 200||#throwable.getMessage().contains('not exist')",
      "close": "#ec2Client.close()",
      "deleteProviderId": "#vswitchId"
    }
  }
}