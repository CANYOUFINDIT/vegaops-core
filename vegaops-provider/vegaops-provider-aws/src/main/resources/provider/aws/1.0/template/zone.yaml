vendor: aws
nodeType: zone
componentId: '#componentId'
actions:
- list
awsRegion: T(software.amazon.awssdk.regions.Region).of(#regionId)
credentials: T(software.amazon.awssdk.auth.credentials.AwsBasicCredentials).create(#accessKey,#secret)
awsCredentialsProvider: T(software.amazon.awssdk.auth.credentials.StaticCredentialsProvider).create(#credentials)
ec2Client: T(software.amazon.awssdk.services.ec2.Ec2Client).builder().credentialsProvider(#awsCredentialsProvider).region(#awsRegion).build()
list:
  argTypes:
  - software.amazon.awssdk.services.ec2.model.DescribeAvailabilityZonesRequest
  output:
    log: 'false'
    success: '#result?.sdkHttpResponse()?.statusCode() eq 200'
    '[zoneList]:[#result.availabilityZones()]':
      groupName: '#me.groupName()'
      networkBorderGroup: '#me.networkBorderGroup()'
      regionName: '#me.regionName()'
      optInStatus: '#me.optInStatus()'
      zoneId: '#me.zoneId()'
      state: '#me.state()'
      zoneName: '#me.zoneName()'
  request: T(software.amazon.awssdk.services.ec2.model.DescribeAvailabilityZonesRequest).builder().build()
  method: describeAvailabilityZones
  argNames:
  - request
  client: '#ec2Client'
