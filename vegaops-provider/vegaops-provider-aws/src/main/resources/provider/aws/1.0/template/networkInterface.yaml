vendor: aws
nodeType: networkInterface
componentId: '#componentId'
actions:
- install-uninstall
- query
- list
- bind-unbind
- tag
awsRegion: T(software.amazon.awssdk.regions.Region).of(#regionId)
credentials: T(software.amazon.awssdk.auth.credentials.AwsBasicCredentials).create(#accessKey,#secret)
awsCredentialsProvider: T(software.amazon.awssdk.auth.credentials.StaticCredentialsProvider).create(#credentials)
ec2Client: T(software.amazon.awssdk.services.ec2.Ec2Client).builder().credentialsProvider(#awsCredentialsProvider).region(#awsRegion).build()
install:
  argTypes:
  - software.amazon.awssdk.services.ec2.model.CreateNetworkInterfaceRequest
  output:
    networkInterfaceId: '#result.networkInterface().networkInterfaceId()'
    success: '#result?.sdkHttpResponse()?.statusCode() eq 200'
    after:
      retryTimes: '3'
      output:
        success: '#status.toString() eq ''available'''
        mergeKeys: '*'
      input:
        resourceId: '#networkInterfaceId'
        name: '#name'
      action: tag
      waitInterval: '3000'
    close: '#ec2Client.close()'
  request: T(software.amazon.awssdk.services.ec2.model.CreateNetworkInterfaceRequest).builder().description(#description).groups(#groups).ipv6AddressCount(#ipv6AddressCount).privateIpAddress(#privateIpAddress).secondaryPrivateIpAddressCount(#secondaryPrivateIpAddressCount).interfaceType(#interfaceType).subnetId(#vswitchId).build()
  method: createNetworkInterface
  argNames:
  - request
  client: '#ec2Client'
tag:
  argTypes:
  - software.amazon.awssdk.services.ec2.model.CreateTagsRequest
  output:
    success: '#result.sdkHttpResponse().statusCode() eq 200'
    after:
      retryTimes: '3'
      output:
        success: '#status.toString() eq ''available'''
        mergeKeys: '*'
      input:
        networkInterfaceId: '#resourceId'
      action: query
      waitInterval: '3000'
    close: '#ec2Client.close()'
  request: T(software.amazon.awssdk.services.ec2.model.CreateTagsRequest).builder().resources(#resourceId).tags(T(software.amazon.awssdk.services.ec2.model.Tag).builder().key("Name").value(#name).build()).build()
  method: createTags
  argNames:
  - request
  client: '#ec2Client'
list:
  argTypes:
  - software.amazon.awssdk.services.ec2.model.DescribeNetworkInterfacesRequest
  output:
    success: '#result?.sdkHttpResponse()?.statusCode() eq 200'
    close: '#ec2Client.close()'
    '[networkInterfacesList]:[#result.networkInterfaces()]':
      type: '#me.attachment()?.deleteOnTermination()'
      availabilityZone: '#me.availabilityZone()'
      ipAddr: '#me.privateIpAddress()'
      vswitchId: '#me.subnetId()'
      tagSet: '#me.tagSet()'
      interfaceType: '#me.interfaceType()'
      instanceId: '#me.attachment()?.instanceId()'
      regionId: '#regionId'
      providerId: '#me.networkInterfaceId()'
      vpcId: '#me.vpcId()'
      zoneId: '#zoneId'
      attachmentId: '#me.attachment()?.attachmentId()'
      macAddr: '#me.macAddress()'
      status: '#me.status()'
  request: T(software.amazon.awssdk.services.ec2.model.DescribeNetworkInterfacesRequest).builder().networkInterfaceIds(#networkInterfaceIds).build()
  method: describeNetworkInterfaces
  argNames:
  - request
  client: '#ec2Client'
query:
  argTypes:
  - software.amazon.awssdk.services.ec2.model.DescribeNetworkInterfacesRequest
  output:
    type: '#result.networkInterfaces()[0]?.attachment()?.deleteOnTermination()'
    availabilityZone: '#result.networkInterfaces()[0]?.availabilityZone()'
    ipAddr: '#result.networkInterfaces()[0]?.privateIpAddress()'
    vswitchId: '#result.networkInterfaces()[0]?.subnetId()'
    tagSet: '#result.networkInterfaces()[0]?.tagSet()'
    interfaceType: '#result.networkInterfaces()[0]?.interfaceType()'
    instanceId: '#result.networkInterfaces()[0]?.attachment()?.instanceId()'
    success: '#result?.sdkHttpResponse()?.statusCode() eq 200'
    providerId: '#result.networkInterfaces()[0]?.networkInterfaceId()'
    vpcId: '#result.networkInterfaces()[0]?.vpcId()'
    attachmentId: '#result.networkInterfaces()[0]?.attachment()?.attachmentId()'
    close: '#ec2Client.close()'
    macAddr: '#result.networkInterfaces()[0]?.macAddress()'
    status: '#result.networkInterfaces()[0]?.status()'
  request: T(software.amazon.awssdk.services.ec2.model.DescribeNetworkInterfacesRequest).builder().networkInterfaceIds(#networkInterfaceId).build()
  method: describeNetworkInterfaces
  argNames:
  - request
  client: '#ec2Client'
uninstall:
  argTypes:
  - software.amazon.awssdk.services.ec2.model.DeleteNetworkInterfaceRequest
  output:
    deleteProviderId: '#networkInterfaceId'
    success: '#result?.sdkHttpResponse()?.statusCode() eq 200'
    close: '#ec2Client.close()'
  request: T(software.amazon.awssdk.services.ec2.model.DeleteNetworkInterfaceRequest).builder().networkInterfaceId(#networkInterfaceId).build()
  method: deleteNetworkInterface
  argNames:
  - request
  client: '#ec2Client'
bind:
  argTypes:
  - software.amazon.awssdk.services.ec2.model.AttachNetworkInterfaceRequest
  output:
    success: '#result?.sdkHttpResponse()?.statusCode() eq 200 || #throwable.toString().contains(''is
      already attached to an instance'')'
    after:
      retryTimes: '10'
      output:
        instanceId: '#instanceId'
        success: '#attachmentId ne null'
        mergeKeys: '*'
      input:
        networkInterfaceId: '#networkInterfaceId'
      action: query
      waitInterval: '3000'
    close: '#ec2Client.close()'
  request: T(software.amazon.awssdk.services.ec2.model.AttachNetworkInterfaceRequest).builder().deviceIndex(#deviceIndex).networkInterfaceId(#networkInterfaceId).instanceId(#instanceId).build()
  method: attachNetworkInterface
  argNames:
  - request
  client: '#ec2Client'
unbind:
  output:
    success: '#result?.sdkHttpResponse()?.statusCode() eq 200'
    after:
      retryTimes: '30'
      output:
        success: '#instanceId eq null'
        mergeKeys: '*'
      input:
        networkInterfaceId: '#networkInterfaceId'
      action: query
      waitInterval: '5000'
    close: '#ec2Client.close()'
  method: detachNetworkInterface
  argValues:
    networkInterfaceId: '#networkInterfaceId'
    ec2Client: '#ec2Client'
  client: org.prophetech.hyperone.vegaops.aws.client.AwsNetworkInterfaceClient
