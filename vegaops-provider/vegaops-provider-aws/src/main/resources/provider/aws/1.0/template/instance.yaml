vendor: aws
nodeType: instance
componentId: '#componentId'
actions:
- install-uninstall
- list
- query
- start-stop
- reboot
- update
awsRegion: T(software.amazon.awssdk.regions.Region).of(#regionId)
credentials: T(software.amazon.awssdk.auth.credentials.AwsBasicCredentials).create(#accessKey,#secret)
awsCredentialsProvider: T(software.amazon.awssdk.auth.credentials.StaticCredentialsProvider).create(#credentials)
ec2Client: T(software.amazon.awssdk.services.ec2.Ec2Client).builder().credentialsProvider(#awsCredentialsProvider).region(#awsRegion).build()
install:
  output:
    image: '#result.instances[0]?.image'
    floatingIp: '#result.instances[0]?.floatingIp'
    memory: '#result.instances[0]?.memory'
    created: '#result.instances[0]?.created'
    privateIp: '#result.instances[0]?.privateIp'
    bandwidthSize: '#result.instances[0]?.bandwidthSize'
    cpu: '#result.instances[0]?.cpu'
    flavor: '#result.instances[0]?.flavor'
    payType: '#result.instances[0]?.payType'
    expireTime: '#result.instances[0]?.expireTime'
    regionId: '#regionId'
    success: '#result.statusCode eq 200'
    vpcId: '#result.instances[0]?.vpcId'
    osType: '#result.instances[0]?.osType'
    name: '#result.instances[0]?.name'
    zoneId: '#result.instances[0]?.zoneId'
    securityGroups: '#result.instances[0]?.securityGroups'
    id: '#result.instances[0]?.id'
    vswithId: '#result.instances[0]?.vswithId'
    status: '#result.instances[0]?.status'
    keyPairName: '#result.instances[0]?.keyPairName'
  method: createInstance
  param:
    subnetId: '#VSwitchId'
    kernelId: '#kernelId'
    imageId: '#imageId'
    keypairName: '#keypairName'
    flavorId: '#flavorId'
    maxCount: '#count'
    cpuNum: '#cpuNum'
    privateIpAddress: '#privateIpAddress'
    ramDiskId: '#ramDiskId'
    name: '#name'
    zoneId: '#zoneId'
    associatePublicIpAddress: '#associatePublicIpAddress'
    securityGroups: '#securityGroups'
    class: org.prophetech.hyperone.vegaops.aws.model.CreateInstanceParam
  argValues:
    param: '#param'
    ec2Client: '#ec2Client'
  client: org.prophetech.hyperone.vegaops.aws.client.AwsInstanceClient
list:
  output:
    log: 'false'
    success: '#result.statusCode eq 200'
    '[regionList]:[#result.instances]':
      image: '#me.image'
      floatingIp: '#me.floatingIp'
      memory: '#me.memory'
      created: '#me.created'
      privateIp: '#me.privateIp'
      bandwidthSize: '#me.bandwidthSize'
      cpu: '#me.cpu'
      flavor: '#me.flavor'
      payType: '#me.payType'
      expireTime: '#me.expireTime'
      regionId: '#regionId'
      vpcId: '#me.vpcId'
      name: '#me.name'
      osType: '#me.osType'
      zoneId: '#zoneId'
      securityGroups: '#me.securityGroups'
      id: '#me.id'
      vswithId: '#me.vswithId'
      status: '#me.status'
      keyPairName: '#me.keyPairName'
    close: '#ec2Client.close()'
  method: getInstances
  argValues:
    ec2Client: '#ec2Client'
  client: org.prophetech.hyperone.vegaops.aws.client.AwsInstanceClient
query:
  output:
    image: '#result.instances.get(0).getImage()'
    floatingIp: '#result.instances.get(0).getFloatingIp()'
    memory: '#result.instances.get(0).getMemory()'
    created: '#result.instances.get(0).getCreated()'
    privateIp: '#result.instances.get(0).getPrivateIp()'
    bandwidthSize: '#result.instances.get(0).getBandwidthSize()'
    cpu: '#result.instances.get(0).getCpu()'
    flavor: '#result.instances.get(0).getFlavor()'
    payType: '#result.instances.get(0).getPayType()'
    expireTime: '#result.instances.get(0).getExpireTime()'
    success: '#result.statusCode eq 200'
    vpcId: '#result.instances.get(0).getVpcId()'
    name: '#result.instances.get(0).getName()'
    osType: '#result.instances.get(0).getOsType()'
    zoneId: '#result.instances.get(0).getZoneId()'
    securityGroups: '#result.instances.get(0).getSecurityGroups()'
    id: '#result.instances.get(0).getId()'
    vswithId: '#result.instances.get(0).getVswithId()'
    status: '#result.instances.get(0).getStatus()'
    keyPairName: '#result.instances.get(0).getKeyPairName()'
  method: getInstanceDetail
  argValues:
    instanceId: '#instanceId'
    ec2Client: '#ec2Client'
  client: org.prophetech.hyperone.vegaops.aws.client.AwsInstanceClient
uninstall:
  argTypes:
  - software.amazon.awssdk.services.ec2.model.TerminateInstancesRequest
  output:
    deleteProviderId: '#instanceId'
    success: '#result?.sdkHttpResponse()?.statusCode() eq 200||#throwable.getMessage().contains(''not
      exist'')'
    after:
      retryTimes: '25'
      output:
        success: '#status  eq ''terminated'''
        mergeKeys: '*'
      input:
        instanceId: '#instanceId'
        ec2Client: '#ec2Client'
      action: query
      waitInterval: '5000'
  request: T(software.amazon.awssdk.services.ec2.model.TerminateInstancesRequest).builder().instanceIds(#instanceId).build()
  method: terminateInstances
  argNames:
  - request
  client: '#ec2Client'
start:
  argTypes:
  - software.amazon.awssdk.services.ec2.model.StartInstancesRequest
  output:
    success: '#result?.sdkHttpResponse()?.statusCode() eq 200'
    after:
      retryTimes: '25'
      output:
        success: '#status  eq ''running'''
        mergeKeys: '*'
      input:
        instanceId: '#instanceId'
        ec2Client: '#ec2Client'
      action: query
      waitInterval: '5000'
    close: '#ec2Client.close()'
  request: T(software.amazon.awssdk.services.ec2.model.StartInstancesRequest).builder().instanceIds(#instanceId).build()
  method: startInstances
  argNames:
  - request
  client: '#ec2Client'
stop:
  argTypes:
  - software.amazon.awssdk.services.ec2.model.StopInstancesRequest
  output:
    success: '#result?.sdkHttpResponse()?.statusCode() eq 200'
    after:
      retryTimes: '25'
      output:
        success: '#status  eq ''stopped'''
        mergeKeys: '*'
      input:
        instanceId: '#instanceId'
        ec2Client: '#ec2Client'
      action: query
      waitInterval: '5000'
    close: '#ec2Client.close()'
  request: T(software.amazon.awssdk.services.ec2.model.StopInstancesRequest).builder().instanceIds(#instanceId).force(#forceStop).build()
  method: stopInstances
  argNames:
  - request
  client: '#ec2Client'
update:
  argTypes:
  - software.amazon.awssdk.services.ec2.model.ModifyInstanceAttributeRequest
  output:
    success: '#result?.sdkHttpResponse()?.statusCode() eq 200'
    after:
      retryTimes: '25'
      output:
        success: '#status  eq ''stopped'''
        mergeKeys: '*'
      input:
        instanceId: '#instanceId'
        ec2Client: '#ec2Client'
      action: query
      waitInterval: '5000'
    close: '#ec2Client.close()'
  request: T(software.amazon.awssdk.services.ec2.model.ModifyInstanceAttributeRequest).builder().instanceId(#instanceId).instanceType(T(software.amazon.awssdk.services.ec2.model.AttributeValue).builder().value(#instanceType).build()).build()
  method: modifyInstanceAttribute
  argNames:
  - request
  client: '#ec2Client'
reboot:
  argTypes:
  - software.amazon.awssdk.services.ec2.model.RebootInstancesRequest
  output:
    success: '#result?.sdkHttpResponse()?.statusCode() eq 200'
    after:
      retryTimes: '25'
      output:
        success: '#status  eq ''running'''
        mergeKeys: '*'
      input:
        instanceId: '#instanceId'
        ec2Client: '#ec2Client'
      action: query
      waitInterval: '5000'
    close: '#ec2Client.close()'
  request: T(software.amazon.awssdk.services.ec2.model.RebootInstancesRequest).builder().instanceIds(#instanceId).build()
  method: rebootInstances
  argNames:
  - request
  client: '#ec2Client'
